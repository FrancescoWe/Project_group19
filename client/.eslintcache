[{"C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\index.js":"1","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\reportWebVitals.js":"2","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\App.js":"3","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\MyParticles.js":"4","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\Itinerary.js":"5","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\HeaderBar.js":"6","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\SignIn.js":"7","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\ItineraryInfo.js":"8","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\SignUp.js":"9","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\Form.js":"10","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\Container.js":"11","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\CssTextField.js":"12","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\MeteoCard.js":"13","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\Card.js":"14","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\CurrentCard.js":"15","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\MyAccount.js":"16"},{"size":573,"mtime":1607466139087,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1607466139088,"results":"19","hashOfConfig":"18"},{"size":8314,"mtime":1607881381278,"results":"20","hashOfConfig":"18"},{"size":732,"mtime":1607802467961,"results":"21","hashOfConfig":"18"},{"size":13823,"mtime":1607802467959,"results":"22","hashOfConfig":"18"},{"size":8125,"mtime":1607802467959,"results":"23","hashOfConfig":"18"},{"size":6517,"mtime":1607881381280,"results":"24","hashOfConfig":"18"},{"size":15376,"mtime":1607802467960,"results":"25","hashOfConfig":"18"},{"size":7384,"mtime":1607802467962,"results":"26","hashOfConfig":"18"},{"size":6812,"mtime":1607802467958,"results":"27","hashOfConfig":"18"},{"size":1872,"mtime":1607802467957,"results":"28","hashOfConfig":"18"},{"size":474,"mtime":1607802467957,"results":"29","hashOfConfig":"18"},{"size":10617,"mtime":1607802467960,"results":"30","hashOfConfig":"18"},{"size":5379,"mtime":1607802467956,"results":"31","hashOfConfig":"18"},{"size":5055,"mtime":1607802467958,"results":"32","hashOfConfig":"18"},{"size":15072,"mtime":1607881698757,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1ij9bfo",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\index.js",[],["75","76"],"C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\reportWebVitals.js",[],"C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\App.js",["77","78","79","80"],"import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport Box from \"@material-ui/core/Box\"\r\nimport Form from \"./Form\"\r\nimport HeaderBar from \"./HeaderBar\"\r\nimport Itinerary from \"./Itinerary\"\r\nimport ItineraryInfo from \"./ItineraryInfo\"\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport MyAccount from \"./MyAccount\"\r\nimport MyParticles from './MyParticles'\r\nimport React, { useState, useEffect } from \"react\"\r\nimport SignIn from \"./SignIn\"\r\nimport SignUp from \"./SignUp\"\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\n\r\nfunction App() {\r\n\r\n  const [user, setLogged] = useState({logged : false,\r\n                                      user_id : \"\",\r\n                                      snackBarOpensLoginControl : false,\r\n                                      snackBarOpensLogOutControl : false,\r\n                                      snackBarOpensSignUpControl : false})\r\n  const [clickedItinMeteos, setClickedItinMeteos] = useState([]);\r\n  const [clickedItinId, setClickedItinId] = useState(\"\");\r\n  const [clickedItinName, setClickedItinName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(user.user_id)\r\n    if(user.user_id == \"\"){\r\n      checkToken()\r\n    }\r\n  },[])\r\n\r\n  const signInDone = (userID) => {\r\n    setLogged({logged : true,//checkToken()\r\n              user_id : userID,\r\n              snackBarOpensLoginControl : true,\r\n              snackBarOpensLogOutControl : false,\r\n              snackBarOpensSignUpControl : false})\r\n  }\r\n\r\n  const signUpDone = () => {\r\n    setLogged({logged : false, \r\n              user_id : \"\",\r\n              snackBarOpensLoginControl : false,\r\n              snackBarOpensLogOutControl : false,\r\n              snackBarOpensSignUpControl : true})\r\n  }\r\n\r\n\r\n\r\n  const logOut = (val) => {       //se il valore passato è 0 l' utente si slogga altrimenti si logga (necessario solo per l' alert)\r\n    localStorage.setItem('token',\"\");\r\n    val==0 ? \r\n      setLogged({logged : false, \r\n                user_id : \"\",\r\n                snackBarOpensLoginControl : false,\r\n                snackBarOpensLogOutControl : true,\r\n                snackBarOpensSignUpControl : false})\r\n    :\r\n      setLogged({logged : false, \r\n                user_id : \"\",\r\n                snackBarOpensLoginControl : false,\r\n                snackBarOpensLogOutControl : false,\r\n                snackBarOpensSignUpControl : false})\r\n  }\r\n  \r\n  async function validToken(token){\r\n    await fetch(\"/api/provaVerifica\", {\r\n      headers: {\r\n        'auth-token' : token\r\n    },\r\n      method : \"GET\"\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then(function(data) {\r\n        if (data.error != null) {\r\n          alert(\"ERROR,\" + \"\\n\" + data.error);\r\n          console.log(\"ERROR\");\r\n          return false\r\n        } else { \r\n          setLogged({logged : true,\r\n                    user_id : data._id,\r\n                    snackBarOpensLoginControl : false,\r\n                    snackBarOpensLogOutControl : false,\r\n                    snackBarOpensSignUpControl : false})\r\n          //localStorage.setItem('user-id', data._id);\r\n          return true\r\n        } \r\n      })\r\n        .catch(error => console.error(error));\r\n      return false\r\n  }\r\n  \r\n  async function checkToken(){\r\n    console.log(\"sto controllando il token\")\r\n    var token= localStorage.getItem(\"token\");\r\n    console.log(token)\r\n    if(token!=null)\r\n      await validToken(token)\r\n  }\r\n\r\n\r\n  console.log(\"App : \" + user.logged + \" \" + user.user_id)\r\n  console.log(\"Bar Status login : \" + user.snackBarOpensLoginControl)\r\n  console.log(\"Bar Status logOut : \" + user.snackBarOpensLogOutControl)\r\n  console.log(\"Bar Status SignUp : \" + user.snackBarOpensSignUpControl)\r\n  \r\n  return (\r\n    <Router>\r\n      <Box \r\n        component=\"div\"\r\n      >\r\n        <MyParticles />\r\n\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <HeaderBar logged = {user.logged} setLogged = {logOut}/> \r\n\r\n              <Snackbar\r\n                  style = {{marginTop : \"37px\", marginRight : \"6px\"}}\r\n                  anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right'\r\n                  }}\r\n\r\n                  open={user.snackBarOpensLogOutControl}\r\n                  autoHideDuration={850}\r\n                  onClose={() => setLogged({logged : false, \r\n                                      user_id : \"\",\r\n                                      snackBarOpensLoginControl : false,\r\n                                      snackBarOpensLogOutControl : false,\r\n                                      snackBarOpensSignUpControl : false})}\r\n              >\r\n                <MuiAlert elevation={6} variant=\"filled\" severity=\"success\">\r\n                  User logged out.\r\n                </MuiAlert>\r\n              </Snackbar>\r\n\r\n              <Snackbar\r\n                  style = {{marginTop : \"37px\", marginRight : \"6px\"}}\r\n                  anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right'\r\n                  }}\r\n\r\n                  open={user.snackBarOpensLoginControl}\r\n                  autoHideDuration={850}\r\n                  onClose={() => setLogged({logged : user.logged, \r\n                                      user_id : user.user_id,\r\n                                      snackBarOpensLoginControl : false,\r\n                                      snackBarOpensLogOutControl : false,\r\n                                      snackBarOpensSignUpControl : false})}\r\n              >\r\n                <MuiAlert elevation={6} variant=\"filled\" severity=\"success\">\r\n                  User logged in.\r\n                </MuiAlert>\r\n              </Snackbar>\r\n\r\n              <Snackbar\r\n                  style = {{marginTop : \"37px\", marginRight : \"6px\"}}\r\n                  anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right'\r\n                  }}\r\n\r\n                  open={user.snackBarOpensSignUpControl}\r\n                  autoHideDuration={850}\r\n                  onClose={() => setLogged({logged : user.logged, \r\n                                      user_id : user.user_id,\r\n                                      snackBarOpensLoginControl : false,\r\n                                      snackBarOpensLogOutControl : false,\r\n                                      snackBarOpensSignUpControl : false})}\r\n              >\r\n                <MuiAlert elevation={6} variant=\"filled\" severity=\"success\">\r\n                  User signed up.\r\n                </MuiAlert>\r\n              </Snackbar>\r\n              \r\n              <Form logged = {user.logged}/>\r\n            </Route>\r\n\r\n            <Route exact path=\"/itinerary\">\r\n              <HeaderBar logged = {user.logged} setLogged = {logOut}/>\r\n              <Itinerary \r\n                user = {user.user_id}\r\n                setClickedItinMeteos={setClickedItinMeteos}\r\n                setClickedItinId={setClickedItinId}\r\n                setClickedItinName={setClickedItinName}\r\n              />\r\n            </Route>\r\n\r\n            <Route exact path=\"/myitinerary\">\r\n              <HeaderBar logged = {user.logged} setLogged = {logOut}/> \r\n              <ItineraryInfo \r\n                user = {user.user_id} \r\n                clickedItinMeteos={clickedItinMeteos} \r\n                clickedItinName={clickedItinName}\r\n                clickedItinId={clickedItinId}\r\n              />\r\n            </Route>\r\n\r\n            { /*NYMO */ console.log(\"\")}\r\n            <Route exact path=\"/myaccount\">\r\n              <HeaderBar logged = {user.logged} setLogged = {logOut}/> \r\n              <MyAccount user_id = {user.user_id} setLogged = {logOut} />\r\n            </Route>\r\n\r\n            <Route exact path=\"/signup\">\r\n              <HeaderBar logged = {user.logged} setLogged = {logOut}/>\r\n              <SignUp setSignedUp = {signUpDone}/>\r\n            </Route>\r\n\r\n            <Route exact path = \"/login\">\r\n                <HeaderBar logged = {user.logged} setLogged = {logOut}/>\r\n                <SignIn logged = {user.logged} setLogged = {signInDone} />\r\n            </Route>\r\n\r\n            <Route exact path=\"/logout\">\r\n              <HeaderBar logged = {user.logged} setLogged = {logOut}/>\r\n            </Route>\r\n\r\n          </Switch>\r\n      </Box>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\MyParticles.js",[],"C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\Itinerary.js",["81"],"import { FixedSizeList } from 'react-window'\r\nimport { makeStyles, Typography } from \"@material-ui/core\"\r\nimport { Redirect } from \"react-router-dom\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssTextField from \"./CssTextField\"\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InformationOutlineIcon from \"mdi-react/InformationOutlineIcon\"\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MapMarkerPathIcon from 'mdi-react/MapMarkerPathIcon'\r\nimport React, { useState, useEffect } from \"react\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\"\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(10),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    cssLabel: {\r\n        color: \"black\"\r\n    },\r\n\r\n    cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n            borderColor: `${theme.palette.primary.main} !important`,\r\n        }\r\n    },\r\n\r\n    notchedOutline: {\r\n        borderWidth: '1px',\r\n        borderColor: 'black !important'\r\n    },\r\n\r\n    multilineColor: {\r\n        color: \"black\"\r\n    },\r\n}));\r\n\r\n//                <Typography style={{ color: \"white\", fontSize: \"80%\" }} component=\"h1\" variant=\"h7\">\r\n//                    click on the info button to get the informations about an itinerary\r\n//                </Typography>\r\n\r\nfunction Itinerary(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [openPopUp, setOpenPopUp] = useState(false);\r\n    const [delClickedItin, setDelClickedItin] = useState(\"\");\r\n    // ------------------------------------------------------------\r\n    const [itinData, setItinData] = useState([])\r\n    const [done, setDone] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    // COMPONENT DID MOUNT\r\n    useEffect(() => {\r\n        fetching();\r\n        console.log(\"The signed-in user's id: \" + props.user);\r\n        // renderRow()\r\n    }, [])\r\n\r\n    async function fetching() {\r\n        setLoading(true);\r\n        await fetch('/itineraries/' + props.user, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        }).then((resp) => resp.json())\r\n            .then(function (data) {\r\n                console.log(data)\r\n                setItinData(data);\r\n                setLoading(false);\r\n            })\r\n            .catch(error => console.error(error))\r\n\r\n    }\r\n\r\n    \r\n    // HANDLERS\r\n    \r\n    async function handleDelete(event) {\r\n        \r\n        await fetch('/itineraries', {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            method: 'DELETE', \r\n            body: JSON.stringify({\r\n                \"user_id\": props.user,\r\n                \"itinerary_id\": delClickedItin\r\n            })\r\n        }).then((resp) => resp.json())\r\n        .then(function (data) {\r\n            console.log(data)\r\n        })\r\n        .catch(error => console.error(error));\r\n        \r\n        setOpenPopUp(false);\r\n        fetching();\r\n        \r\n    }\r\n    \r\n    \r\n    async function handleInfo(event) {\r\n        \r\n        props.setClickedItinId(event.target.id);\r\n        props.setClickedItinName(event.target.getAttribute(\"name\"))\r\n        \r\n        await fetch('/meteoComponents/' + props.user + \"&\" + event.target.id, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        }).then((resp) => resp.json())\r\n        .then(function (data) {\r\n            //(console.log(data)\r\n            props.setClickedItinMeteos(data);\r\n            // setItinData(data);\r\n        })\r\n        .catch(error => console.error(error))\r\n        \r\n        // setOpen(true);\r\n        setDone(true);\r\n        \r\n    };\r\n    \r\n    //-----------------------------------------------------------------\r\n    \r\n    async function addItinerary(){\r\n        await fetch('/itineraries' , {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                \"itinerary_name\": name,\r\n                \"user_id\": props.user\r\n            })\r\n        }).then(response => response.json())\r\n        .then(function (data) {\r\n            console.log(data)\r\n            if(data.error != null){\r\n                window.alert(data.error);\r\n                console.log(\"ERROR\");\r\n            }\r\n        })\r\n        .catch(error => {\r\n            window.alert(error);\r\n            console.error(error);\r\n        })\r\n\r\n        setName(\"\");\r\n        fetching();\r\n    }\r\n    \r\n    function handleClick() {\r\n        setOpen(true);\r\n    }\r\n    \r\n    function handleCancel() {\r\n        setOpen(false);\r\n    }\r\n    \r\n    function handleCancelDel() {\r\n        setOpenPopUp(false);\r\n    }\r\n    \r\n    function handleClickDel(event){\r\n        setDelClickedItin(event.target.id)\r\n        console.log(event.target.id)\r\n        setOpenPopUp(true);\r\n    }\r\n\r\n    function handleDone() {\r\n        setOpen(false);\r\n        addItinerary();\r\n    }\r\n    \r\n    function handleChange(event){\r\n        setName(event.target.value);\r\n    }\r\n    \r\n    \r\n    // RENDER DELLE RIGHE\r\n    function renderRow() {\r\n        return (\r\n            <div>\r\n                {itinData.map(item => (\r\n                    <div\r\n                        key={item._id}\r\n                        className=\"itineraryDiv\"\r\n                    >\r\n                        <ListItem\r\n                            style={{ \r\n                                color: \"white\", \r\n                                background: \"linear-gradient(to right, rgba(255,255,255,0.8),rgba(112,112,112,0.7))\" , \r\n                                borderRadius : \"15px\"\r\n                            }}\r\n                        >\r\n                            <ListItemText style={{ pointerEvents: \"none\", color: \"black\" }} >\r\n                                <h2> {item.name} </h2>\r\n                            </ListItemText>\r\n\r\n                            <div\r\n                                onClick={handleInfo}\r\n                                id={item._id}\r\n                                name={item.name}\r\n                            >\r\n                                <IconButton  style={{ pointerEvents: \"none\" }}>\r\n                                    <InformationOutlineIcon style={{ pointerEvents: \"none\" }} />\r\n                                </IconButton>\r\n                            </div>\r\n\r\n                            <div\r\n                                onClick={handleClickDel}\r\n                                id={item._id}\r\n                                name={item.name}\r\n                            >\r\n                                <IconButton style={{ pointerEvents: \"none\" }} variant=\"outlined\">\r\n                                    <DeleteIcon style={{ pointerEvents: \"none\" }} />\r\n                                </IconButton>\r\n                            </div>\r\n\r\n                        </ListItem>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    // RENDERING\r\n    return (\r\n        <div>\r\n            {done ?\r\n                <Redirect to={\"/myitinerary\"} /> :\r\n                \r\n                <Container component=\"main\" maxWidth=\"xs\" style={{ paddingTop: 0 }}>\r\n\r\n                    <div className={classes.paper}>\r\n                        <MapMarkerPathIcon size={45} style={{ color: \"white\", marginBottom: \"8px\" }} />\r\n                        <Typography \r\n                            style={{ color: \"white\", marginBottom: \"3%\" }} \r\n                            component=\"h5\" \r\n                            variant=\"h5\"\r\n                        >\r\n                            MY ITINERARIES\r\n                        </Typography>\r\n                        <br />\r\n                    </div>\r\n\r\n                    <Box\r\n                        component=\"div\"\r\n                        border={2}\r\n                        mx={0}\r\n                        mt={5}\r\n                        pt={1}\r\n                        pb={1}\r\n                        boxShadow={10}\r\n                        style={{ textAlign: \"center\", borderColor: \"rgba(0,0,0,0.3)\", color: \"white\", background: \"rgba(0,0,0,0.2)\" }}\r\n                    >\r\n                        {loading ?\r\n                            <div className={classes.root}>\r\n                                <CircularProgress style={{ color: \"white\" }} />\r\n                            </div> :\r\n                            <FixedSizeList\r\n                                height={270}\r\n                                width={300}\r\n                                itemSize={600}\r\n                                itemCount={1}\r\n                                style={{ position: \"relative\", margin: \"auto\" }}\r\n                            >\r\n                                {renderRow}\r\n                            </FixedSizeList>\r\n                        }\r\n                    </Box>\r\n\r\n                    <div className={classes.button}>\r\n                        <Button\r\n                            className=\"btn\"\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            startIcon={<AddIcon />}\r\n                            onClick={handleClick}\r\n                            style={{color: \"black\", borderStyle: \"solid\", borderColor: \"black\", borderWidth:\"1px\"}}\r\n                        >\r\n                            Add itinerary\r\n                        </Button>\r\n                    </div>\r\n                </Container>\r\n            }\r\n\r\n                        \r\n            <Dialog open={open} onClose={handleCancel} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">ADD A NEW ITINERARY</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText style={{color: \"black\"}}>\r\n                        Insert the name of the new itinerary\r\n                    </DialogContentText>\r\n                    <CssTextField\r\n                        autoFocus\r\n                        style={{width: \"100%\" }}\r\n                        id=\"outlined-basic\"\r\n                        label=\"Name\"\r\n                        variant=\"outlined\"\r\n                        value={name}\r\n                        onChange={handleChange}\r\n                        name=\"name\"\r\n                        InputProps={{\r\n                            className: classes.multilineColor,\r\n                            classes: {\r\n                                root: classes.cssOutlinedInput,\r\n                                notchedOutline: classes.notchedOutline\r\n                            }\r\n    \r\n                        }}\r\n                        InputLabelProps={{\r\n                            classes: {\r\n                                root: classes.cssLabel,\r\n                            },\r\n                        }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCancel} style={{color: \"red\"}}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button \r\n                        onClick={handleDone} \r\n                        variant=\"outlined\"\r\n                        style={{color: \"black\", borderColor: \"black\"}}\r\n                    >\r\n                        <p>Done</p>\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={openPopUp} onClose={handleCancel} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">DELETE ITINERARY</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Are you sure you want to delete this?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCancelDel} style={{color: \"black\"}}>\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    <div>\r\n                        <Button \r\n                            onClick={handleDelete} \r\n                            variant=\"contained\"\r\n                            style={{color: \"black\", borderColor: \"black\", background:\"red\"}}\r\n                            >\r\n                            <p>YES</p>\r\n                        </Button>\r\n                    </div>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\nexport default Itinerary","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\HeaderBar.js",[],"C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\SignIn.js",["82"],"import \"../Css/search.css\"\r\nimport { grey } from '@material-ui/core/colors';\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport CssTextField from \"./CssTextField\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport React, { useState } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    palette: {\r\n      primary: {\r\n        main: grey,\r\n        mainGradient: \"linear-gradient(to right, #ffffff, #5c5c5c)\"\r\n      }\r\n    }\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(2, 0, 2),\r\n    background: \"linear-gradient(to right, #ffffff,#5c5c5c)\"\r\n  },\r\n  cssLabel: {\r\n    color: \"white\"\r\n  },\r\n  cssOutlinedInput: {\r\n    '&$cssFocused $notchedOutline': {\r\n      borderColor: `${theme.palette.primary.main} !important`,\r\n    }\r\n  },\r\n  notchedOutline: {\r\n    borderWidth: '1px',\r\n    borderColor: 'grey !important'\r\n  },\r\n  multilineColor: {\r\n    color: \"white\"\r\n  },\r\n\r\n}));\r\n\r\n// COMPONENT\r\nfunction SignIn(props) {\r\n  const classes = useStyles();\r\n\r\n  // STATO\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isLogged, setLogged] = useState(props.logged);\r\n\r\n  function handleChangeMail(event) {\r\n    const { value } = event.target\r\n    setEmail(value);\r\n  }\r\n\r\n  function handleChangePsw(event) {\r\n    const { value } = event.target\r\n    setPassword(value);\r\n  }\r\n\r\n  //console.log(\"SignIn : \" + isLogged)\r\n\r\n  async function getIdFromToken(token){\r\n    await fetch(\"/api/provaVerifica\", {\r\n      headers: {\r\n        'auth-token' : token\r\n    },\r\n      method : \"GET\"\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then(function(data) {\r\n        if (data.error != null) {\r\n          alert(\"ERROR,\" + \"\\n\" + data.error);\r\n          console.log(\"ERROR\");\r\n          return false;\r\n        } else { \r\n          props.setLogged(data._id);\r\n          props.setObjectUser(data);\r\n          //localStorage.setItem('user-id', data._id);\r\n          return true\r\n        } \r\n      })\r\n        .catch(error => console.error(error));\r\n      return false;\r\n  }\r\n\r\n  async function handleClick() {\r\n    await fetch('/users/login', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          \"email\": email,\r\n          \"password\": password\r\n        })\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then(function (data) {\r\n        console.log(data);\r\n        if (data.error != null) {\r\n          alert(data.error);\r\n          console.log(\"ERROR\");\r\n          return false;\r\n        } else {\r\n          //console.log(data.token);\r\n          setLogged(true)\r\n          localStorage.setItem('auth-token', data.token);\r\n          getIdFromToken(data.token)\r\n          return true;\r\n        }\r\n      })\r\n      .catch(error => console.error(error));\r\n    return false;\r\n  }\r\n\r\n  // GRAFICA\r\n  return (\r\n    <div>\r\n      {isLogged ? <Redirect to={\"/\"} /> : \r\n      <Container component=\"main\" maxWidth=\"xs\" style={{ paddingTop: 50 }}>\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n\r\n          <Typography style={{ color: \"white\" }} component=\"h1\" variant=\"h5\">\r\n            SIGN IN\r\n          </Typography>\r\n\r\n          <form className={classes.form} noValidate>\r\n            <CssTextField\r\n              onChange={handleChangeMail}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              InputProps={{\r\n                className: classes.multilineColor,\r\n                classes: {\r\n                  root: classes.cssOutlinedInput,\r\n                  notchedOutline: classes.notchedOutline\r\n                }\r\n              }}\r\n              InputLabelProps={{\r\n                classes: {\r\n                  root: classes.cssLabel,\r\n                },\r\n              }}\r\n            />\r\n            <CssTextField\r\n              onChange={handleChangePsw}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              InputProps={{\r\n                className: classes.multilineColor,\r\n                classes: {\r\n                  root: classes.cssOutlinedInput,\r\n                  notchedOutline: classes.notchedOutline\r\n                }\r\n              }}\r\n              InputLabelProps={{\r\n                classes: {\r\n                  root: classes.cssLabel,\r\n                },\r\n              }}\r\n            />\r\n\r\n            <Button\r\n              className={classes.submit}\r\n              fullWidth\r\n              variant=\"contained\"\r\n              size=\"large\"\r\n              onClick={handleClick}\r\n            >\r\n              SIGN IN\r\n            </Button> \r\n            \r\n            <Grid container>\r\n              <Grid\r\n                item\r\n                style={{ margin: \"auto\" }}\r\n              >\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  style={{ textTransform: \"none\", borderColor: \"#5c5c5c\" }}\r\n                >\r\n                  <Link\r\n                    style={{ color: \"white\" }}\r\n                    to={\"/SignUp\"}\r\n                    variant=\"body2\"\r\n                  >\r\n                    Don't have an account? Sign Up\r\n                        </Link>\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default SignIn","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\ItineraryInfo.js",["83","84"],"import 'date-fns';\r\nimport { Link } from \"react-router-dom\"\r\nimport { makeStyles, Typography } from \"@material-ui/core\"\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Button from \"@material-ui/core/Button\"\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Container from '@material-ui/core/Container';\r\nimport CssTextField from \"./CssTextField\"\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\r\nimport MeteoCard from \"./MeteoCard\"\r\nimport React, { useState, useEffect } from \"react\"\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        marginBottom : \"1.5%\",\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\"\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    cssLabel: {\r\n        color: \"black\"\r\n    },\r\n    cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n            borderColor: `${theme.palette.primary.main} !important`,\r\n        }\r\n    },\r\n    notchedOutline: {\r\n        borderWidth: '1px',\r\n        borderColor: 'black !important'\r\n    },\r\n    multilineColor: {\r\n        color: \"black\"\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction ItineraryInfo(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [incomingMeteos, setIncomingMeteos] = useState(props.clickedItinMeteos);\r\n    const [openPopUp, setOpenPopUp] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [clickedMeteoComp, setClickedMeteoComp] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const [name, setName] = useState(\"\");\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date(''));\r\n\r\n    //console.log(incomingMeteos);\r\n\r\n    async function patchIfProblems(){\r\n        var tempCurrentDate = new Date().getTime() / 1000\r\n        var currentDate = tempCurrentDate.toFixed(0)\r\n\r\n        const ids = await Promise.all(incomingMeteos.map(async item => {\r\n            if(!item.available || item.date < currentDate){\r\n                await patch(props.user, props.clickedItinId, item._id);\r\n            }\r\n        }));\r\n        console.log(\"quante volte vien chiamata?\")\r\n        get();\r\n    }\r\n\r\n    /*async function handleUpdate(){\r\n        setLoading(true);\r\n        await Promise.all(incomingMeteos.map(async item => {\r\n            await patch(function(){\r\n            },props.user, props.clickedItinId, item._id);\r\n        }));\r\n        get();\r\n        console.log(\"una chiamata dopo la patch nell'update\")\r\n        console.log(\"solo una volta alla fine della funzione\");\r\n    }*/\r\n\r\n\r\n    useEffect(() => {\r\n        /*const ids = incomingMeteos.map(async item => {\r\n            if(!item.available){\r\n                await patch(function(){\r\n                    //get();\r\n                    //console.log(\"una get dopo aver patchato se false\")\r\n                },props.user, props.clickedItinId, item._id);\r\n            }\r\n        });\r\n        console.log(\"quante volte vien chiamata?\")\r\n        get();*/\r\n        patchIfProblems()\r\n    }, [])\r\n\r\n\r\n    async function patch(user_id, itinerary_id, meteo_id){\r\n        await fetch(\"/meteoComponents\" , {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            method: \"PATCH\",\r\n            body: JSON.stringify({\r\n                \"user_id\": user_id,\r\n                \"itinerary_id\": itinerary_id,\r\n                \"meteo_id\": meteo_id\r\n            })\r\n        }).then(response => response.json())\r\n        .then(function(data) {\r\n            console.log(data)\r\n            if(data.error != null){\r\n                window.alert(data.error);\r\n                console.log(\"ERROR\");\r\n            } else {\r\n                console.log(data.success);\r\n\r\n            }\r\n        })\r\n        .catch(error => {\r\n            window.alert(error);\r\n            console.error(error);\r\n        })\r\n\r\n    }\r\n    \r\n    // console.log(props.clickedItinMeteos)\r\n    // console.log(incomingMeteos);\r\n    \r\n    \r\n    function handleCancelDel() {\r\n        setOpenPopUp(false);\r\n    }\r\n    \r\n    function handleClickDel(event) {\r\n        setOpenPopUp(true);\r\n        console.log(clickedMeteoComp);\r\n    }\r\n    \r\n    async function handleDelete() {\r\n        // console.log(props.clickedItinId)\r\n        // console.log(clickedMeteoComp)\r\n        setLoading(true);\r\n        await fetch('/meteoComponents', {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            method: 'DELETE',\r\n            body: JSON.stringify({\r\n                \"user_id\": props.user,\r\n                \"itinerary_id\": props.clickedItinId,\r\n                \"meteo_id\": clickedMeteoComp\r\n            })\r\n        }).then((resp) => resp.json())\r\n        .then(function (data) {\r\n            console.log(data)\r\n            get();\r\n        })\r\n        .catch(error => console.error(error));\r\n        setOpenPopUp(false);\r\n    }\r\n    \r\n    async function get(){\r\n        await fetch('/meteoComponents/' + props.user + \"&\" + props.clickedItinId, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        }).then((resp) => resp.json())\r\n        .then(function (data) {\r\n            //(console.log(data)\r\n            setIncomingMeteos(data);\r\n            setLoading(false);\r\n            // setItinData(data);\r\n        })\r\n        .catch(error => console.error(error))\r\n    }\r\n    \r\n    \r\n    function handleCancelAdd() {\r\n        setOpen(false)\r\n    }\r\n    \r\n    function handleClickAdd() {\r\n        setOpen(true);\r\n    }\r\n    \r\n    function handleChange(event) {\r\n        setName(event.target.value);\r\n    }\r\n    \r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(date);\r\n    };\r\n    \r\n    async function handleDone() {\r\n        setLoading(true);\r\n        addStageFetch();\r\n        setOpen(false);\r\n    }\r\n\r\n    async function handleUpdate(){\r\n        setLoading(true);\r\n        await Promise.all(incomingMeteos.map(async item => {\r\n            await patch(props.user, props.clickedItinId, item._id);\r\n        }));\r\n        get();\r\n        console.log(\"una chiamata dopo la patch nell'update\")\r\n        console.log(\"solo una volta alla fine della funzione\");\r\n    }\r\n\r\n\r\n//    console.log(props.user)\r\n//    console.log(selectedDate);\r\n//    console.log(toUnix);\r\n    \r\n    async function addStageFetch(){\r\n        const unixDate=new Date(selectedDate).getTime()/1000\r\n        await fetch('/meteoComponents' , {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                \"itinerary_id\": props.clickedItinId,\r\n                \"user_id\": props.user,\r\n                \"cityName\": name,\r\n                \"date\": unixDate,\r\n            })\r\n        }).then(resp => resp.json())\r\n        .then(function (data) {\r\n            console.log(data)\r\n            if(data.error != null){\r\n                window.alert(data.error);\r\n                console.log(\"ERROR\");\r\n            }\r\n            setName(\"\");\r\n            get()\r\n        })\r\n        .catch(error => {\r\n            window.alert(error);\r\n            console.error(error);\r\n        })\r\n    }\r\n    \r\n    \r\n    function renderCards() {\r\n        return (\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                spacing={3}\r\n            >\r\n                {incomingMeteos.map(item => (\r\n                        <MeteoCard\r\n                            key={item._id}\r\n                            item={item}\r\n                            handleClickDel={handleClickDel}\r\n                            setClickedMeteoComp={setClickedMeteoComp}\r\n                        />\r\n                ))}\r\n            </Grid>\r\n        )\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Toolbar style={{ minHeight: \"40px\", marginTop: \"5px\" }}>\r\n                <Link to={\"/itinerary\"} style={{ textDecoration: 'none' }}>\r\n                    <Button\r\n                        className=\"btn\"\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        startIcon={<KeyboardBackspaceIcon />}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                </Link>\r\n            </Toolbar>\r\n            <Container\r\n                display=\"flex\"\r\n                component=\"main\"\r\n                width=\"70%\"\r\n                style={{ marginTop: \"-0.25%\" }}\r\n            >\r\n                <div className={classes.paper}>\r\n                    <Typography style={{ color: \"white\", marginBottom: \"1%\" }} component=\"h5\" variant=\"h5\">\r\n                        STAGES OF THE ITINERARY \"{props.clickedItinName}\"\r\n                    </Typography>\r\n                    <Grid container direction=\"row\" spacing={2} justify=\"center\" alignItems=\"center\">\r\n                        <Grid item>\r\n                            <Button\r\n                                className=\"btn\"\r\n                                variant=\"contained\"\r\n                                size=\"medium\"\r\n                                startIcon={<AddIcon />}\r\n                                onClick={handleClickAdd}\r\n                                style={{minWidth:\"155px\"}}\r\n                            >\r\n                                ADD STAGE\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                style={{background: \"linear-gradient(to right, #5c5c5c, #ffffff)\"}}\r\n                                variant=\"contained\"\r\n                                size=\"medium\"\r\n                                startIcon={<UpdateIcon />}\r\n                                onClick={handleUpdate}\r\n                            >\r\n                                UPDATE DATA\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                </div>\r\n\r\n                {loading ?\r\n                    <div className={classes.root}>\r\n                        <CircularProgress style={{ color: \"white\" }} />\r\n                    </div> :\r\n                    renderCards()\r\n                }\r\n\r\n            </Container>\r\n\r\n            <Dialog open={openPopUp} onClose={handleCancelDel} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">DELETE STAGE</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Are you sure you want to delete this?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCancelDel} style={{ color: \"black\" }}>\r\n                        Cancel\r\n                    </Button>\r\n\r\n                    <div>\r\n                        <Button\r\n                            onClick={handleDelete}\r\n                            variant=\"contained\"\r\n                            style={{ color: \"black\", borderColor: \"black\", background: \"red\" }}\r\n                        >\r\n                            <p>YES</p>\r\n                        </Button>\r\n                    </div>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog open={open} onClose={handleCancelAdd} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">ADD A NEW STAGE</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText style={{ color: \"black\" }}>\r\n                        Insert the name of the city\r\n                    </DialogContentText>\r\n                    <CssTextField\r\n                        autoFocus\r\n                        style={{ width: \"100%\" }}\r\n                        id=\"outlined-basic\"\r\n                        label=\"City\"\r\n                        variant=\"outlined\"\r\n                        value={name}\r\n                        onChange={handleChange}\r\n                        name=\"cityName\"\r\n                        InputProps={{\r\n                            className: classes.multilineColor,\r\n                            classes: {\r\n                                root: classes.cssOutlinedInput,\r\n                                notchedOutline: classes.notchedOutline\r\n                            }\r\n\r\n                        }}\r\n                        InputLabelProps={{\r\n                            classes: {\r\n                                root: classes.cssLabel,\r\n                            },\r\n                        }}\r\n                    />\r\n                    <DialogContentText style={{ color: \"black\", marginTop:\"10px\", marginBottom: \"0px\" }}>\r\n                        Pick a date\r\n                    </DialogContentText>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            disableToolbar\r\n                            variant=\"inline\"\r\n                            format=\"dd/MM/yyyy\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"\"\r\n                            value={selectedDate}\r\n                            onChange={handleDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                            style={{color: \"black\"}}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCancelAdd} style={{ color: \"red\" }}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={handleDone}\r\n                        variant=\"outlined\"\r\n                        style={{ color: \"black\", borderColor: \"black\" }}\r\n                    >\r\n                        <p>Done</p>\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItineraryInfo","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\SignUp.js",[],"C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\Form.js",["85","86","87"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport Button from \"@material-ui/core/Button\"\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Container from \"./Container\"\r\nimport CssTextField from \"./CssTextField\"\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport React, { useState } from \"react\"\r\nimport Search from \"@material-ui/icons/Search\"\r\n\r\n// STYLING\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    cssLabel: {\r\n        color: \"white\"\r\n    },\r\n\r\n    cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n            borderColor: `${theme.palette.primary.main} !important`,\r\n        }\r\n    },\r\n\r\n    notchedOutline: {\r\n        borderWidth: '1px',\r\n        borderColor: 'grey !important'\r\n    },\r\n\r\n    multilineColor: {\r\n        color: \"white\"\r\n    },\r\n\r\n}));\r\n\r\n\r\nfunction Form(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const styles = {\r\n        width: 700,\r\n        marginTop: 35\r\n    }\r\n\r\n    const [research, setResearch] = useState(\"\")\r\n    const [researchBefore, setResearchBefore] = useState(\"\")\r\n    const [data, setData] = useState(Object)\r\n    const [dataTwo, setSecondData] = useState(Object)\r\n    const [loading, setLoading] = useState(false)\r\n    const [buttonClicked, setButtonClicked] = useState(false)\r\n\r\n    async function handleClick() {\r\n        console.log(localStorage.getItem('user-id'));\r\n        if (research.localeCompare(\"\") != 0 && research.localeCompare(researchBefore) != 0) {\r\n            setResearchBefore(research)\r\n            setLoading(true)\r\n            setButtonClicked(true)\r\n\r\n            const searchUrl = \"./meteos/\" + research;\r\n\r\n            await fetch(searchUrl)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    var array = new Array();\r\n                    var jsonCurrent={\r\n                        icon: \"http://openweathermap.org/img/wn/\" + response.current.weather[0].icon + \"@2x.png\",\r\n                        temp_Max: response.daily[0].temp.max,\r\n                        temp_Min: response.daily[0].temp.min,\r\n                        date: response.current.dt * 1000,\r\n                        cityName: response.timezone,\r\n                        temp: response.current.temp,\r\n                        humidity: response.current.humidity,\r\n                        wind_speed: response.current.wind_speed,\r\n                        deg: response.current.wind_deg,\r\n                        main: response.current.weather[0].main,\r\n                        feels_like: response.current.feels_like,\r\n                        uvi: response.current.uvi\r\n                    }\r\n                    //console.log(jsonCurrent.temp);\r\n                    for(var i=1; i<6; i++){\r\n                        var jsonToPass={\r\n                            icon: \"http://openweathermap.org/img/wn/\" + response.daily[i].weather[0].icon + \"@2x.png\",\r\n                            temp_Max: response.daily[i].temp.max,\r\n                            temp_Min: response.daily[i].temp.min,\r\n                            date: response.daily[i].dt * 1000,\r\n                            cityName: response.timezone,\r\n                            temp: response.daily[i].temp.day,\r\n                            humidity: response.daily[i].humidity,\r\n                            wind_speed: response.daily[i].wind_speed,\r\n                            deg: response.daily[i].wind_deg,\r\n                            main: response.daily[i].weather[0].main\r\n                        }\r\n                        array.push(jsonToPass);\r\n                    }\r\n                    console.log(array)\r\n                    setData(jsonCurrent)\r\n                    setSecondData(array)\r\n                    setLoading(false)\r\n                });\r\n        }\r\n    }\r\n\r\n    function handleChange(event) {\r\n        var { value } = event.target\r\n        setResearch(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<h2 class=\"title\">Cerca Località: </h2>*/}\r\n            <br />\r\n            <form className=\"search__part\">\r\n                <CssTextField\r\n                    style={styles}\r\n                    id=\"outlined-basic\"\r\n                    label=\"Search City\"\r\n                    placeholder=\"London, New York, Tokyo ...\"\r\n                    variant=\"outlined\"\r\n                    name=\"research\"\r\n                    onChange={handleChange}\r\n                    value={research}\r\n                    InputProps={{\r\n                        className: classes.multilineColor,\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <Search style={{color: \"white\"}} onClick={handleClick} />\r\n                            </InputAdornment>\r\n                        ),\r\n                        classes: {\r\n                            root: classes.cssOutlinedInput,\r\n                            notchedOutline: classes.notchedOutline\r\n                        }\r\n\r\n                    }}\r\n                    InputLabelProps={{\r\n                        classes: {\r\n                            root: classes.cssLabel,\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                {/*<input name=\"research\" type=\"text\" id=\"searchbar\" value={this.state.research} onChange={this.handleChange} class=\"form-control\" placeholder=\"London, New York, Tokyo...\" />*/}\r\n                <br />\r\n                <br />\r\n\r\n                <div style = {{position : \"relative\"}}>\r\n                    <Button\r\n                        className=\"btn\"\r\n                        variant=\"contained\"\r\n                        onClick={handleClick}\r\n                        size=\"large\"\r\n                        startIcon={<Search />}\r\n                        disabled={loading}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                    {loading && <CircularProgress size={24} style={{\r\n                        color: \"white\",\r\n                        position: 'absolute',\r\n                        top: '50%',\r\n                        left: '50%',\r\n                        marginTop: -12,\r\n                        marginLeft: -12,\r\n                    }} />}\r\n                </div>\r\n\r\n\r\n                {(!loading && buttonClicked) ?\r\n                            <Container dataToPass = {data}\r\n                                dataToPassTwo = {dataTwo}\r\n                            />\r\n                        :\r\n                            null\r\n                }\r\n\r\n                {/*<button type=\"button\" class=\"btn\" id=\"forecast\" onClick={this.handleClick}><i class=\"fa fa-search\"></i> Search </button>*/}\r\n            </form>\r\n            <br />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Form","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\Container.js",["88","89"],"import Box from \"@material-ui/core/Box\"\r\nimport Card from \"./Card\"\r\nimport CurrentCard from \"./CurrentCard\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport React, { useState } from \"react\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\n\r\n\r\nfunction Container(props) {\r\n\r\n    //console.log(props.dataToPass)\r\n\r\n    const [incomingData] = useState(props.dataToPass);\r\n    const [incomingSecondData] = useState(props.dataToPassTwo)\r\n\r\n    const paperstyles = {\r\n        backgroundColor : \"rgba(255,255,255,0.45)\",\r\n        margin : \"auto\"\r\n    }\r\n\r\n    const textStyle = {\r\n        color : \"white\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant = \"h5\" style={{color : \"white\" , marginTop : \"1%\"}}>\r\n                    Current\r\n            </Typography>\r\n            <Divider style = {{background : \"rgba(255,255,255,0.15)\", marginLeft : \"30%\", marginRight: \"30%\", marginBottom : \"0.5%\"}}/> \r\n            \r\n            <CurrentCard incomingData = {incomingData} />\r\n            \r\n            <Typography variant = \"h5\" style={{color : \"white\", marginTop : \"1%\"}}>\r\n                Forecast\r\n            </Typography>\r\n            <Divider style = {{background : \"rgba(255,255,255,0.15)\", marginLeft : \"13%\", marginRight: \"13%\", marginBottom : \"0.5%\"}}/>\r\n\r\n            <Box\r\n                component=\"div\"\r\n                display=\"flex\"\r\n                mx={0}\r\n                mt={0}\r\n                pt={0}\r\n                pb={0}\r\n            >\r\n                <Card num=\"0\" data = {incomingSecondData} />\r\n                <Card num=\"1\" data = {incomingSecondData}/>\r\n                <Card num=\"2\" data = {incomingSecondData}/>\r\n                <Card num=\"3\" data = {incomingSecondData}/>\r\n                <Card num=\"4\" data = {incomingSecondData}/>\r\n            </Box>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Container","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\CssTextField.js",[],"C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\MeteoCard.js",["90"],"import Box from \"@material-ui/core/Box\"\r\nimport DeleteIcon from 'mdi-react/DeleteIcon'\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport OpacityIcon from '@material-ui/icons/Opacity'\r\nimport React, { useState } from \"react\"\r\nimport ThermometerIcon from 'mdi-react/ThermometerIcon'\r\nimport WeatherWindyIcon from 'mdi-react/WeatherWindyIcon'\r\n\r\n\r\nfunction MeteoCard(props) {\r\n\r\n    const date = new Date(props.item.date * 1000);\r\n\r\n    const updateDate = new Date(props.item.dataUpdatedOn * 1000)\r\n    const [clicked] = useState(props.item._id);\r\n    const [availableDate] = useState(subtractDays(date));\r\n\r\n    function subtractDays(data) {\r\n        var result = new Date(data);\r\n        result.setDate(result.getDate() - 7);\r\n        return result;\r\n    }\r\n\r\n    function round(value, precision) {\r\n        var multiplier = Math.pow(10, precision || 0);\r\n        return Math.round(value * multiplier) / multiplier;\r\n    }\r\n\r\n    function toTextualDescription(degree) {\r\n        if (degree > 337.5)\r\n            return 'N'\r\n        if (degree > 292.5)\r\n            return 'NW'\r\n        if (degree > 247.5)\r\n            return 'W'\r\n        if (degree > 202.5)\r\n            return 'SW'\r\n        if (degree > 157.5)\r\n            return 'S'\r\n        if (degree > 122.5)\r\n            return 'SE'\r\n        if (degree > 67.5)\r\n            return 'E'\r\n        if (degree > 22.5)\r\n            return 'NE'\r\n        return 'N';\r\n    }\r\n\r\n    function handleClickDel(event) {\r\n        // console.log(clicked)\r\n        props.setClickedMeteoComp(clicked)\r\n        props.handleClickDel();\r\n    }\r\n\r\n    return (\r\n        <Grid item>\r\n            <Box\r\n                mt=\"auto\"\r\n                mr=\"auto\"\r\n                mb=\"auto\"\r\n                ml=\"auto\"\r\n                width={250}\r\n                minHeight={344}\r\n                borderRadius={16}\r\n                boxShadow=\"20\"\r\n                style={{\r\n                    backgroundColor: \"rgba(255,255,255,0.5)\"\r\n                }}\r\n            >\r\n\r\n                {props.item.available ?\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        alignItems=\"center\"\r\n                        justify=\"center\"\r\n                        spacing={1}\r\n                    >\r\n                        <Grid item>\r\n                            <h1 style={{ color: \"Black\", fontSize: \"27px\", marginTop: \"3px\", marginBottom: \"3px\", textAlign: \"center\" }}>\r\n                                {props.item.cityName}\r\n                            </h1>\r\n                            <h3 style={{ textAlign: \"center\" }}>\r\n                                {date.getDate() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getFullYear()}\r\n                            </h3>\r\n                            <img\r\n                                src={\"http://openweathermap.org/img/wn/\" + props.item.icon + \".png\"}\r\n                                style={{ marginLeft: \"auto\", marginRight: \"auto\", display: \"block\" }}>\r\n\r\n                            </img>\r\n                            <h2 style={{ color: \"Black\", fontSize: \"25px\", textAlign: \"center\" }}>\r\n                                {props.item.main}\r\n                            </h2>\r\n                        </Grid>\r\n                        <Divider orientation=\"horizontal\" flexItem />\r\n                        <Grid item>\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                alignItems=\"center\"\r\n                                spacing={5}\r\n                            >\r\n                                <Grid item>\r\n                                    <Grid\r\n                                        container\r\n                                        direction=\"column\"\r\n                                        alignItems=\"center\"\r\n                                        spacing={1}\r\n                                    >\r\n                                        <Grid item>\r\n                                            <ThermometerIcon size={30} />\r\n                                            <h3>{round(props.item.temp, 1) + \"°\"}</h3>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n                                                <Grid item >\r\n                                                    <p style={{ fontWeight: \"bold\", color: \"#008fd6\" }}>\r\n                                                        {round(props.item.temp_Min, 1) + \"°\"}\r\n                                                    </p>\r\n                                                </Grid>\r\n                                                <Grid item>\r\n                                                    <p style={{ fontWeight: \"bold\", color: \"rgba(140,0,0,0.8\" }}>\r\n                                                        {round(props.item.temp_Max, 1) + \"°\"}\r\n                                                    </p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Divider\r\n                                    orientation=\"vertical\"\r\n                                    style={{ marginBottom: \"11%\", marginTop: \"11%\" }}\r\n                                    flexItem\r\n                                />\r\n                                <Grid item>\r\n                                    <OpacityIcon style={{ fontSize: \"30px\" }} />\r\n                                    <h3>{props.item.humidity + \"%\"}</h3>\r\n                                </Grid>\r\n                                <Divider\r\n                                    orientation=\"vertical\"\r\n                                    style={{ marginBottom: \"11%\", marginTop: \"11%\" }}\r\n                                    flexItem\r\n                                />\r\n                                <Grid item>\r\n                                    <Grid\r\n                                        container\r\n                                        direction=\"column\"\r\n                                        alignItems=\"center\"\r\n                                        justify=\"center\"\r\n                                    >\r\n                                        <Grid item>\r\n                                                <WeatherWindyIcon size={30} />\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <h3>{round(props.item.wind_speed, 1)}</h3>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                                <h6>km/h</h6>\r\n                                        </Grid>\r\n                                        <Grid item style = {{marginTop : \"40%\"}}>\r\n                                            {toTextualDescription(props.item.wind_deg)}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid\r\n                            container\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\"\r\n                            style={{ marginTop: \"8px\" }}\r\n                        >\r\n                            <Grid item>\r\n                                <h6> Updated on: </h6>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <h6> {updateDate.getDate() + \"/\" + (updateDate.getMonth() + 1) + \"/\" + updateDate.getFullYear()} </h6>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item style={{ marginTop: \"-7px\" }}>\r\n                            <div style={{ textAlign: \"center\" }}>\r\n                                <IconButton\r\n                                    onClick={handleClickDel}\r\n                                >\r\n                                    <DeleteIcon style={{ pointerEvents: \"none\" }} />\r\n                                </IconButton>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    :\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        alignItems=\"center\"\r\n                        spacing={1}\r\n                        style = {{minWidth : 250 , minHeight : 344}}\r\n                    > \r\n                        <Grid item>\r\n\r\n                            <h1 style={{ color: \"Black\", fontSize: \"27px\", marginTop : \"3%\", marginBottom: \"2%\", textAlign: \"center\" }}>\r\n                                {props.item.cityName}\r\n                            </h1>\r\n\r\n                            <h3 style={{ textAlign: \"center\"}}>\r\n                                {date.getDate() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getFullYear()}\r\n                            </h3>\r\n\r\n                        </Grid>\r\n                        <Grid item style={{ textAlign: \"center\", verticalAlign : \"center\" , marginTop:\"37%\"}}>\r\n                            <h1 >\r\n                                DATA WILL BE AVAILABLE ON:\r\n                                    {availableDate.getDate() + \"/\" +\r\n                                    (availableDate.getMonth() + 1) + \"/\" +\r\n                                    availableDate.getFullYear()}\r\n                            </h1>\r\n                        </Grid>\r\n\r\n                        <Grid item style={{ marginTop: \"32%\" , textAlign: \"center\"}}>\r\n                            <div>\r\n                                <IconButton\r\n                                    onClick={handleClickDel}\r\n                                >\r\n                                    <DeleteIcon style={{ pointerEvents: \"none\" }} />\r\n                                </IconButton>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            </Box>\r\n        </Grid >\r\n    )\r\n}\r\n\r\nexport default MeteoCard\r\n\r\n\r\n","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\Card.js",[],"C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\CurrentCard.js",["91"],"import Box from \"@material-ui/core/Box\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport OpacityIcon from '@material-ui/icons/Opacity'\r\nimport React from \"react\"\r\nimport SunglassesIcon from 'mdi-react/SunglassesIcon'\r\nimport ThermometerIcon from 'mdi-react/ThermometerIcon'\r\nimport WeatherWindyIcon from 'mdi-react/WeatherWindyIcon'\r\n\r\nfunction CurrentCard(props) {\r\n\r\n    function round(value, precision) {\r\n        var multiplier = Math.pow(10, precision || 0);\r\n        return Math.round(value * multiplier) / multiplier;\r\n    }\r\n\r\n    function  toTextualDescription(degree){\r\n        if (degree>337.5) \r\n            return 'N'\r\n        if (degree>292.5) \r\n            return 'NW'\r\n        if (degree>247.5) \r\n            return 'W'\r\n        if (degree>202.5) \r\n            return 'SW'\r\n        if (degree>157.5) \r\n            return 'S'\r\n        if (degree>122.5) \r\n            return 'SE'\r\n        if (degree>67.5) \r\n            return 'E'\r\n        if (degree>22.5) \r\n            return 'NE'\r\n        return 'N';\r\n    }\r\n\r\n    return(\r\n        <div>     \r\n        \r\n            <Box\r\n                mt=\"auto\"\r\n                mr=\"auto\"\r\n                mb=\"auto\"\r\n                ml=\"auto\"\r\n                width={350}\r\n                height={280}\r\n                borderRadius={16}\r\n                boxShadow=\"20\"\r\n                style = {{\r\n                    backgroundColor : \"rgba(255,255,255,0.5)\"\r\n                }}\r\n            >\r\n                <Grid container direction=\"column\" justify= \"center\" alignItems = \"center\">\r\n                    <Grid item style = {{padding : 0}}>\r\n                        <img src={props.incomingData.icon} />\r\n                        <h2 style = {{color : \"Black\", fontSize : \"30px\"}}>{props.incomingData.main}</h2>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Grid container direction = \"row\" justify = \"center\" alignItems = \"center\" spacing = {6} style = {{marginTop : 0}}>\r\n                            <Grid item>\r\n                                <Grid item >\r\n                                    <Grid container direction = \"column\" alignItems = \"center\" spacing = {1}>\r\n                                        <Grid item>\r\n                                            <ThermometerIcon size = {30}/>\r\n                                            <h3>{round(props.incomingData.temp,1) + \"°\"}</h3>\r\n                                        </Grid>\r\n                                        <Grid item >\r\n                                                <p style = {{fontWeight : \"bold\", color:\"#008fd6\"}}>\r\n                                                    {round(props.incomingData.temp_Min,1) + \"°\"}\r\n                                                </p>\r\n                                                <p style = {{fontWeight : \"bold\", color:\"#b30000\"}}>\r\n                                                    {round(props.incomingData.temp_Max,1) + \"°\"}\r\n                                                </p>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Divider orientation=\"vertical\" style = {{marginBottom : \"5%\", marginTop: \"5%\"}} flexItem/>\r\n                            <Grid item>\r\n                                <OpacityIcon style = {{ fontSize : \"30px\"}}/>\r\n                                <h3>{props.incomingData.humidity + \"%\"}</h3>\r\n                            </Grid>\r\n                            <Divider orientation=\"vertical\" style = {{marginBottom : \"5%\", marginTop: \"5%\"}} flexItem/>\r\n                            <Grid item>\r\n                                <Grid container direction = \"column\" alignItems = \"center\" spacing = {1} >\r\n                                    <Grid item>\r\n                                            <WeatherWindyIcon size = {30} />\r\n                                            <h3>{round(props.incomingData.wind_speed,1)}</h3>\r\n                                            <h6>km/h</h6>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        {toTextualDescription(props.incomingData.wind_deg)}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Divider orientation=\"vertical\" style = {{marginBottom : \"5%\", marginTop: \"5%\"}} flexItem/>\r\n                            <Grid item>\r\n                                <SunglassesIcon size = {30} />\r\n                                <br/>\r\n                                <h3>{props.incomingData.uvi}</h3>\r\n                                <p style={{fontWeight : \"bold\"}}>UV</p>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default CurrentCard","C:\\Users\\NyMo\\Desktop\\Università\\5 semestre\\Ingegneria del software 2\\NEW\\Project_group19\\client\\src\\Components\\MyAccount.js",["92","93"],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":29,"column":21,"nodeType":"100","messageId":"101","endLine":29,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":32,"column":5,"nodeType":"104","endLine":32,"endColumn":7,"suggestions":"105"},{"ruleId":"98","severity":1,"message":"99","line":54,"column":8,"nodeType":"100","messageId":"101","endLine":54,"endColumn":10},{"ruleId":"106","severity":1,"message":"107","line":78,"column":26,"nodeType":"100","messageId":"108","endLine":78,"endColumn":27},{"ruleId":"102","severity":1,"message":"109","line":88,"column":8,"nodeType":"104","endLine":88,"endColumn":10,"suggestions":"110"},{"ruleId":"106","severity":1,"message":"107","line":90,"column":26,"nodeType":"100","messageId":"108","endLine":90,"endColumn":27},{"ruleId":"111","severity":1,"message":"112","line":85,"column":15,"nodeType":"113","messageId":"114","endLine":85,"endColumn":18},{"ruleId":"102","severity":1,"message":"115","line":118,"column":8,"nodeType":"104","endLine":118,"endColumn":10,"suggestions":"116"},{"ruleId":"98","severity":1,"message":"117","line":53,"column":40,"nodeType":"100","messageId":"101","endLine":53,"endColumn":42},{"ruleId":"98","severity":1,"message":"117","line":53,"column":87,"nodeType":"100","messageId":"101","endLine":53,"endColumn":89},{"ruleId":"118","severity":1,"message":"119","line":63,"column":33,"nodeType":"120","messageId":"121","endLine":63,"endColumn":44},{"ruleId":"111","severity":1,"message":"122","line":16,"column":11,"nodeType":"113","messageId":"114","endLine":16,"endColumn":22},{"ruleId":"111","severity":1,"message":"123","line":21,"column":11,"nodeType":"113","messageId":"114","endLine":21,"endColumn":20},{"ruleId":"124","severity":1,"message":"125","line":88,"column":29,"nodeType":"126","endLine":90,"endColumn":103},{"ruleId":"124","severity":1,"message":"125","line":55,"column":25,"nodeType":"126","endLine":55,"endColumn":62},{"ruleId":"111","severity":1,"message":"127","line":69,"column":11,"nodeType":"113","messageId":"114","endLine":69,"endColumn":19},{"ruleId":"102","severity":1,"message":"128","line":74,"column":8,"nodeType":"104","endLine":74,"endColumn":10,"suggestions":"129"},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkToken' and 'user.user_id'. Either include them or remove the dependency array.","ArrayExpression",["132"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'fetching' and 'props.user'. Either include them or remove the dependency array.",["133"],"no-unused-vars","'ids' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'patchIfProblems'. Either include it or remove the dependency array.",["134"],"Expected '!==' and instead saw '!='.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'paperstyles' is assigned a value but never used.","'textStyle' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'tempMail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array.",["135"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [checkToken, user.user_id]",{"range":"144","text":"145"},"Update the dependencies array to be: [fetching, props.user]",{"range":"146","text":"147"},"Update the dependencies array to be: [patchIfProblems]",{"range":"148","text":"149"},"Update the dependencies array to be: [fetchUser]",{"range":"150","text":"151"},[1214,1216],"[checkToken, user.user_id]",[2970,2972],"[fetching, props.user]",[3928,3930],"[patchIfProblems]",[2395,2397],"[fetchUser]"]