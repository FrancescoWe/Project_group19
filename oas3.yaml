openapi: 3.0.0
info: 
    version: '3.0'
    title: "API IngSoft2 group #19"
    description: "Prova API"
    license: 
      name: MIT
servers: 
  - url: http://localhost:3000/api/v1
    description: LocalHost
paths: 
  /users: 
    post: 
      description: "Create a new user in the system"
      summary: Create a new user
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              required: 
                - password
                - email
              properties: 
                password:
                  type: string
                  description: "User's email"
                email: 
                  type: string
                  description: "User's email"
      responses:
        '201':
          description: 'The respond provides the created user'
          headers: 
            Location:
              schema:
                type: string
              description: Link to the newly created user
        '400':
          description: "This email is already taken / generic error"
              
    get: 
      description: "Get all the users in the system"
      summary: Get all users
      parameters:
      responses:
        '201':
          description: "The response provides the list of all the users"
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '400':
          description: "Error"
                
    patch:
      description: "Update the email of the specified user"
      summary: Update email
      parameters:
        - name: id
          in: path
        - name: email
          in: body
      responses:
        '201':
          description: "The response provides the updated user"
        '400':
          description: "Error"
          
    delete:
      description: "Delete a user and all the itineraries linked to it"
      summary: Delete a user
      parameters:
        - name: id
          in: body
      responses:
        '201':
          description: "User deleted"
        '400':
          description: "User not found"

  /users/{id}:    
    get:
      description: >-
        Get information about a specific user, identiied by an ID
      summary: Get a user
      parameters:
        - name: id
          in: path
          required: true
          description: 'ID of the requested user'
      responses: 
        '201':
          description: 'The user corresponding to the input ID'
          #content:
            #application/json:
              #schema:
                #$ref: '#/components/schemas/User'
        '400':
          description: 'User not found'

  /users/{email}:    
    get:
      description: >-
        Get information about a specific user, identified by the email
      summary: Get a user
      parameters:
        - name: email
          in: path
          required: true
          description: 'Email of the requested user'
      responses: 
        '201':
          description: 'The user corresponding to the input email'
          #content:
            #application/json:
              #schema:
                #$ref: '#/components/schemas/User'
        '400':
          description: 'User not found'
                
    delete:
      description: >-
        Delete a specific user, identified by the email
      summary: Delete a user
      parameters:
        - name: email
          in: path
          required: true
          description: 'email of the user to be removed'
      responses:
        '201':
          description: 'User deleted'
          #content:
            #application/json:
              #schema:
                #$ref: '#/components/schemas/User'
        '400':
          description: 'User not found'

  /meteoComponents:  
    get:
      description: >-
        Get the list of all meteo components saved.
      summary: View all meteos components that are part of an itinerario
      responses:
        '201':
          description: 'Collection of meteoComponents'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeteoComponent'
        '400':
          description: "Error"
          
    post:
      description: >-
        Create a new meteoComponent, >-
        which is the set of the informations about the >-
        meteo in a stage of an itinerario
      summary: Create meteoComponent
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              required: 
                - date
                - cityName
              properties: 
                itinerary_id:
                  type: string
                  description: 'Id of the itinerary to which the new meteoComponent is linked'
                temp_Max:
                  type: string
                  description: 'Maximum temperature'
                temp_Min: 
                  type: string
                  description: 'Minimum temperature'
                date:
                  type: string
                  description: 'Date'
                cityName:
                  type: string
                  description: 'Name of the city'
      responses:
        '201':
          description: 'The created itinerary'
        '400':
          description: "Itinerary not found"
  
    delete:
      description: >-
        Delete a meteoComponent and remove it from the itinerary to which it belongs
      summary: Delete meteoComponent
      requestBody:
        content:
          application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
      parameters:
        - name: id
          in: body
          descripion: "Id of the meteoComponent to be removed"
          required: true
      responses:
        '201':
          description: 'meteoComponent deleted'
        '400':
          description: 'meteoComponent not found'
  
  /meteoComponents/{id}:    
    get:
      description: >-
        Get information about a specific meteoComponent
      summary: Get a specific meteoComponent
      parameters:
        - name: id
          in: path
          required: true
          description: 'Id of the requested meteoComponent'
      responses: 
        '200':
          description: 'The user corresponding to the input email'
          #content:
            #application/json:
              #schema:
                #$ref: '#/components/schemas/User'
        '400':
          description: 'meteoComponent not found'
                
  /meteos:
    get:
      description: >-
        Get the current meteo.
      summary: View current meteo
      responses: 
        '200':
          description: 'Collection of books'
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Meteo'
    
    post:
      description: >-
        Create meteo
      summary: Create meteo
      responses:
        '200':
          description: "Confirmation string"
    
  /meteos/current/{city}:
    get: 
      description: >-
        Get informations about current meteo of a city
      summary: Get current meteo
      parameters: 
        - name: city
          in: path
          required: true
          description: 'Name of the requested city'
      responses:
        '200':
          description: 'The current meteo of the specified city'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meteo'
                
  /meteos/forecast/{city}:
    get:
      description: >-
        Get informations about the meteo of the next 5 days of a city
      summary: Get forecast meteo
      parameters: 
        - name: ciry
          in: path
          description: 'Name of the requested city'
      responses:
        '200':
          description: 'The forecast meteo of the specified city'

  /itineraries:
    get:
      description: >-
        Get the list of all the itineraries
      summary: Get itineraries
      responses:
        '200':
          description: 'All the itineraries of all the users'
          content:
            application/json:
              schema: 
    post:
      description: >-
        Create a new itinerary 
      summary: Creates itinerary
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: 'ID of the user who made the itinerary'
      responses:
        '200':
          description: 'Itinerary saved successfully.'
    
    delete:
      description: >-
        Delete an itinerary and remove it from the list of itineraries of the user who had it
      summary: Delete itinerary
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'Id of the itinerary to be removed'
      responses:
        '200':
          description: 'Itinerary deleted'
        '400':
          description: 'Itinerary not foundat'
   

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - password
      properties:
        id: 
          type: string
          description: 'ID of the user'
        email:
          type: string
          description: 'Email of the user'
        password: 
          type: string
          description: 'Password dof the user'
          
    MeteoComponent:
      type: object
      required: 
        - date
        - temp_Min
        - temp_Max
        - cityName
      properties:
        date: 
          type: string
          description: 'Date of the meteo'
        temp_Min:
          type: string
          description: 'Minimum temperature in that place in that day'
        temp_Max:
          type: string
          description: 'Maximum temperature in that place in that day'
        cityName: 
          type: string
          description: 'The name of the city of witch the user wants to know the meteo conditions'
          
    Meteo:
      type: object
      required:
        - temperatura
        - data
      properties: 
        temperatura: 
          type: string
          description: "Temperature"
        data: 
          type: string
          description: "Date"
          
    Itinerary:
      type: object
      required:
        - meteos_date
      properties:
        user_id:
          type: ObjectId
          description: "Id of the user who created the itinerary"
        meteos_dates:
          type: Array of strings
          description: "Array of IDs of the meteoComponents belonging to the itinerary"