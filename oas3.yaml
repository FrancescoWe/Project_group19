openapi: 3.0.0
info: 
    version: '3.0'
    title: "Prova API"
    description: "provo a scrivere la api"
    license: 
      name: MIT
servers: 
  - url: http://localhost:3000/api/v1
    description: LocalHost
paths: 
  /users: 
    post: 
      description: "Creates a new user in the system"
      summary: Create a new user
      requestBody:
        content: 
          application/json:
            schema:
              type: object
              required: 
                - password
                - email
              properties: 
                password:
                  type: string
                  description: 'Password dello user'
                email: 
                  type: string
                  description: 'Email dello user'
      responses:
        '201':
          description: 'The created user'
          headers: 
            Location:
              schema:
                type: string
              description: Link to the newly created user
          #content: 
            #application/json:
              #schema: 
                #$ref: '#/components/schemas/User'

  /users/{id}:    
    get:
      description: >-
        Gets information about a specific user, identiied by an ID
      summary: Get a user
      parameters:
        - name: id
          in: path
          required: true
          description: 'ID of the requested user'
      responses: 
        '200':
          description: 'The user corresponding to the input ID'
          #content:
            #application/json:
              #schema:
                #$ref: '#/components/schemas/User'

  /users/{email}:    
    get:
      description: >-
        Gets information about a specific user, identiied by an email
      summary: Get a user
      parameters:
        - name: email
          in: path
          required: true
          description: 'email of the requested user'
      responses: 
        '200':
          description: 'The user corresponding to the input email'
          #content:
            #application/json:
              #schema:
                #$ref: '#/components/schemas/User'  
                
  /meteos:
    get:
      description: >-
        Gets the current meteo.
      summary: View current meteo
      responses: 
        '200':
          description: 'Collection of books'
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Meteo'
    
  /meteos/current/{city}:
    get: 
      description: >-
        Gets information about current meteo of a city
      summary: Get meteo
      parameters: 
        - name: city
          in: path
          required: true
          description: 'Name of the requested city'
      responses:
        '200':
          description: 'The meteo corresponding the city'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meteo'


components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - password
      properties:
        id: 
          type: string
          description: 'ID of the user'
        email:
          type: string
          description: 'email of the user'
        password: 
          type: string
          description: 'password dello user'
    Meteo:
      type: object
      required:
        - temperatura
        - data
      properties: 
        temperatura: 
          type: string
          description: "yeah"
        data: 
          type: string
          description: "yoah"